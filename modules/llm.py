import logging
import openai
import asyncio
from typing import List, Dict, Any, Optional
from config import OPENROUTER_API_KEY, MAX_MESSAGE_LENGTH, MAX_HISTORY_MESSAGES, LLM_REQUEST_TIMEOUT

logger = logging.getLogger(__name__)

try:
    from modules.web_search import web_search_client, format_search_results
    WEB_SEARCH_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Web search not available: {e}")
    WEB_SEARCH_AVAILABLE = False
    web_search_client = None
    format_search_results = None

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
SYSTEM_PROMPT = """–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ –∏ –≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–æ–≤.

–¢–í–û–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
‚Ä¢ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ê–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –≤–∞–ª—é—Ç—ã, —Å—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
‚Ä¢ ETF, —Ñ–æ–Ω–¥—ã, –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ DeFi
‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–π –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ä—ã–Ω–∫–∏

–°–¢–ò–õ–¨ –ê–ù–ê–õ–ò–ó–ê:
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Ç–µ–∑–∏—Å ‚Üí –∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Üí –≤—ã–≤–æ–¥—ã
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Ä–∏—Å–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏–≤–æ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π/–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π)
‚Ä¢ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í (–ö–†–ê–¢–ö–ò–ô):
üìä **–ê–Ω–∞–ª–∏–∑:** —Ç–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
üìà **–ü–ª—é—Å—ã:** 2-3 –∫–ª—é—á–µ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∑–∞
üìâ **–ú–∏–Ω—É—Å—ã:** 2-3 –≥–ª–∞–≤–Ω—ã—Ö —Ä–∏—Å–∫–∞  
üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** —á–µ—Ç–∫–∏–π –≤—ã–≤–æ–¥
‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä—ã

–°–¢–ò–õ–¨: –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π, –±–µ–∑ –≤–æ–¥—ã, –º–∞–∫—Å–∏–º—É–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏

–ü–†–ò–ù–¶–ò–ü–´:
‚Ä¢ –ß–µ—Å—Ç–Ω–æ—Å—Ç—å: –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Å—è –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–æ–≤
‚Ä¢ –ë–∞–ª–∞–Ω—Å: –ø–æ–∫–∞–∑—ã–≤–∞–π –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∏ —É–≥—Ä–æ–∑—ã
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –æ–±—ä—è—Å–Ω—è–π –ª–æ–≥–∏–∫—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: —É—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é
‚Ä¢ –ö–†–ê–¢–ö–û–°–¢–¨: –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º, –º–∞–∫—Å–∏–º—É–º 200-300 —Å–ª–æ–≤

–í–ê–ñ–ù–´–ï –î–ò–°–ö–õ–ï–ô–ú–ï–†–´:
- –≠—Ç–æ –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
- –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –ü—Ä–æ—à–ª–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±—É–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∏—Å–∫–æ–º –ø–æ—Ç–µ—Ä–∏ –∫–∞–ø–∏—Ç–∞–ª–∞

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú –∏ –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ú:
- –û–±—â–∞—è –¥–ª–∏–Ω–∞: –Ω–µ –±–æ–ª–µ–µ 200-300 —Å–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —ç–º–æ–¥–∑–∏
- –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
- –ú–∞–∫—Å–∏–º—É–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏, –º–∏–Ω–∏–º—É–º —Ç–µ–∫—Å—Ç–∞"""

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: chat_id -> list —Å–æ–æ–±—â–µ–Ω–∏–π
chat_histories: Dict[int, List[Dict[str, str]]] = {}

def add_to_history(chat_id: int, role: str, content: str) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞."""
    if chat_id not in chat_histories:
        chat_histories[chat_id] = []
    
    chat_histories[chat_id].append({"role": role, "content": content})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ N —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∏—Å–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
    if len(chat_histories[chat_id]) > MAX_HISTORY_MESSAGES:
        chat_histories[chat_id] = chat_histories[chat_id][-MAX_HISTORY_MESSAGES:]
    
    logger.debug(f"Added {role} message to chat {chat_id} history, total messages: {len(chat_histories[chat_id])}")

def get_chat_context(chat_id: int) -> List[Dict[str, str]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è LLM (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –∏—Å—Ç–æ—Ä–∏—è)."""
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    
    if chat_id in chat_histories:
        messages.extend(chat_histories[chat_id])
    
    return messages

def clear_chat_history(chat_id: int) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞."""
    if chat_id in chat_histories:
        del chat_histories[chat_id]
        logger.info(f"Chat history cleared for chat {chat_id}")

class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API —á–µ—Ä–µ–∑ OpenAI SDK."""
    
    def __init__(self, api_key: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter."""
        self.api_key = api_key or OPENROUTER_API_KEY
        if not self.api_key:
            raise ValueError("OpenRouter API key is required")
            
        self.client = openai.OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=self.api_key
        )
        
        logger.info("LLM client initialized")
    
    async def generate_response(self, user_message: str, chat_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(user_message) > MAX_MESSAGE_LENGTH:
            logger.warning(f"Message too long from chat {chat_id}: {len(user_message)} chars")
            return f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(user_message)} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∞–∫—Å–∏–º—É–º {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not user_message.strip():
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
            
        try:
            logger.debug(f"LLM request from chat {chat_id}: {user_message[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ web search –¥–æ—Å—Ç—É–ø–µ–Ω)
            current_info = ""
            
            if WEB_SEARCH_AVAILABLE and web_search_client:
                search_query = web_search_client.detect_financial_query(user_message)
                if search_query:
                    logger.info(f"üîç DETECTED FINANCIAL QUERY: {search_query}")
                    try:
                        search_results = await web_search_client.search_asset_info(search_query)
                        logger.info(f"üìä SEARCH RESULTS: {search_results}")
                        current_info = format_search_results(search_results)
                        logger.info(f"üìù FORMATTED INFO LENGTH: {len(current_info)} chars")
                        if current_info:
                            logger.info(f"üìã FORMATTED CONTENT: {current_info[:500]}...")
                        else:
                            logger.warning("‚ö†Ô∏è NO SEARCH RESULTS TO FORMAT")
                    except Exception as search_error:
                        logger.error(f"‚ùå SEARCH ERROR: {search_error}")
                        current_info = ""
                else:
                    logger.info(f"‚ùå NO FINANCIAL KEYWORDS DETECTED in: {user_message}")
            else:
                logger.warning("‚ö†Ô∏è WEB SEARCH NOT AVAILABLE, using LLM knowledge only")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_history(chat_id, "user", user_message)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –∏—Å—Ç–æ—Ä–∏—è)
            messages = get_chat_context(chat_id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if current_info:
                logger.info("üîó ADDING SEARCH INFO TO LLM CONTEXT")
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                messages.append({
                    "role": "system", 
                    "content": f"–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:\n{current_info}\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ–µ–º –∞–Ω–∞–ª–∏–∑–µ, –Ω–æ –Ω–µ –∫–æ–ø–∏—Ä—É–π –¥–æ—Å–ª–æ–≤–Ω–æ. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑."
                })
            else:
                logger.info("üìù NO SEARCH INFO TO ADD, using LLM knowledge only")
            
            logger.info(f"üöÄ SENDING REQUEST TO LLM with {len(messages)} messages")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    self.client.chat.completions.create,
                    model="anthropic/claude-sonnet-4",
                    messages=messages,
                    max_tokens=1000,
                    temperature=0.7
                ),
                timeout=LLM_REQUEST_TIMEOUT
            )
            
            logger.info("‚úÖ LLM RESPONSE RECEIVED")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            llm_response = response.choices[0].message.content
            
            if not llm_response:
                logger.warning(f"Empty response from LLM for chat {chat_id}")
                return "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_history(chat_id, "assistant", llm_response)
            
            logger.debug(f"LLM response to chat {chat_id}: {llm_response[:100]}...")
            logger.info(f"LLM request completed successfully for chat {chat_id}")
            
            return llm_response
            
        except asyncio.TimeoutError:
            logger.error(f"LLM request timeout for chat {chat_id}")
            return "–ó–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."
            
        except openai.RateLimitError:
            logger.error(f"Rate limit exceeded for chat {chat_id}")
            return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
            
        except openai.AuthenticationError:
            logger.error(f"Authentication error for chat {chat_id}")
            return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
        except openai.APIConnectionError:
            logger.error(f"API connection error for chat {chat_id}")
            return "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except Exception as e:
            logger.error(f"Unexpected error for chat {chat_id}: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
llm_client = LLMClient()
