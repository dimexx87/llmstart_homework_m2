"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ API.
"""
import logging
import asyncio
from typing import Dict, Optional, List
from datetime import datetime, timedelta
import requests

try:
    import yfinance as yf
    YFINANCE_AVAILABLE = True
except ImportError:
    YFINANCE_AVAILABLE = False
    yf = None

logger = logging.getLogger(__name__)

class FinanceDataClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API.
    
    –î–û–°–¢–£–ü–ù–´–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:
    - Yahoo Finance API - —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ ‚úÖ
    - –¶–ë –†–§ API - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç ‚úÖ
    - CoinGecko - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
    """
    
    def __init__(self):
        self.supported_apis = {
            'yahoo_finance': YFINANCE_AVAILABLE,
            'cbr_ru': True,           # –¶–ë –†–§ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
            'coinGecko': False,       # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        }
        logger.info(f"üè¶ Finance data client initialized. Available APIs: {[k for k, v in self.supported_apis.items() if v]}")
        if not YFINANCE_AVAILABLE:
            logger.error("‚ùå yfinance NOT INSTALLED! Run: pip install yfinance")
        else:
            logger.info("‚úÖ yfinance available for real data")
    
    async def get_stock_quote(self, symbol: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É –∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Yahoo Finance.
        """
        if not YFINANCE_AVAILABLE:
            logger.warning("yfinance not available")
            return None
            
        try:
            logger.info(f"üîç Getting stock quote for {symbol}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            ticker_data = await asyncio.to_thread(self._fetch_stock_data, symbol)
            
            if ticker_data:
                logger.info(f"‚úÖ Stock data found for {symbol}: {ticker_data['price']}")
                return ticker_data
            else:
                logger.warning(f"‚ùå No stock data found for {symbol}")
                return None
                
        except Exception as e:
            logger.error(f"Error getting stock quote for {symbol}: {e}")
            return None
    
    def _fetch_stock_data(self, symbol: str) -> Optional[Dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ yfinance."""
        try:
            ticker = yf.Ticker(symbol)
            info = ticker.info
            hist = ticker.history(period="1d")
            
            if hist.empty:
                return None
                
            current_price = hist['Close'].iloc[-1]
            prev_close = info.get('previousClose', current_price)
            change = current_price - prev_close
            change_percent = (change / prev_close) * 100 if prev_close else 0
            
            return {
                'symbol': symbol,
                'price': round(current_price, 2),
                'change': round(change, 2),
                'change_percent': round(change_percent, 2),
                'currency': info.get('currency', 'USD'),
                'name': info.get('longName', symbol),
                'market_cap': info.get('marketCap'),
                'volume': hist['Volume'].iloc[-1] if not hist.empty else None,
                'timestamp': datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"_fetch_stock_data error: {e}")
            return None
    
    async def get_currency_rate(self, from_currency: str = "USD", to_currency: str = "RUB") -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –¶–ë –†–§ –∏–ª–∏ Yahoo Finance.
        """
        try:
            logger.info(f"üîç Getting currency rate {from_currency}/{to_currency}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¶–ë –†–§ –¥–ª—è —Ä—É–±–ª–µ–≤—ã—Ö –ø–∞—Ä
            if to_currency == "RUB":
                cbr_data = await self._fetch_cbr_rate(from_currency)
                if cbr_data:
                    return cbr_data
            
            # Fallback –Ω–∞ Yahoo Finance
            if YFINANCE_AVAILABLE:
                pair_symbol = f"{from_currency}{to_currency}=X"
                return await self.get_stock_quote(pair_symbol)
                
            return None
            
        except Exception as e:
            logger.error(f"Error getting currency rate: {e}")
            return None
    
    async def _fetch_cbr_rate(self, currency: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –¶–ë –†–§."""
        try:
            url = "https://www.cbr-xml-daily.ru/daily_json.js"
            response = await asyncio.to_thread(requests.get, url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if currency.upper() in data['Valute']:
                    valute_data = data['Valute'][currency.upper()]
                    rate = valute_data['Value']
                    prev_rate = valute_data['Previous']
                    
                    return {
                        'symbol': f"{currency}/RUB",
                        'price': round(rate, 4),
                        'change': round(rate - prev_rate, 4),
                        'change_percent': round(((rate - prev_rate) / prev_rate) * 100, 2),
                        'currency': 'RUB',
                        'name': valute_data['Name'],
                        'source': '–¶–ë –†–§',
                        'timestamp': data['Date']
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"–¶–ë –†–§ API error: {e}")
            return None
    
    async def get_crypto_price(self, symbol: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ Yahoo Finance.
        """
        if not YFINANCE_AVAILABLE:
            return None
            
        try:
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ Yahoo Finance
            crypto_symbol = f"{symbol.upper()}-USD"
            return await self.get_stock_quote(crypto_symbol)
            
        except Exception as e:
            logger.error(f"Error getting crypto price for {symbol}: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
finance_client = FinanceDataClient()

# TODO: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

async def get_market_data(asset_type: str, symbol: str) -> Dict:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        asset_type: 'stock', 'currency', 'crypto', 'commodity'
        symbol: –°–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    logger.info(f"Market data requested: {asset_type}:{symbol} - PLACEHOLDER")
    
    return {
        'symbol': symbol,
        'asset_type': asset_type,
        'price': None,
        'change': None,
        'volume': None,
        'timestamp': datetime.now().isoformat(),
        'source': 'placeholder',
        'error': 'Finance APIs not implemented yet'
    }

def format_market_data(data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM.
    """
    if data.get('error'):
        return f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ {data['symbol']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {data['error']}"
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return f"üìä {data['symbol']}: —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)"
