import logging
import asyncio
import requests
from typing import List, Dict, Optional
from urllib.parse import quote_plus
from config import LLM_REQUEST_TIMEOUT

logger = logging.getLogger(__name__)

class WebSearchClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è web search –∫–ª–∏–µ–Ω—Ç–∞."""
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        logger.info("Web search client initialized")
    
    async def search_duckduckgo_html(self, query: str, max_results: int = 3) -> List[Dict[str, str]]:
        """
        –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo HTML (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö).
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DuckDuckGo Lite –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            encoded_query = quote_plus(f"{query} site:investing.com OR site:marketwatch.com OR site:yahoo.com")
            url = f"https://lite.duckduckgo.com/lite/?q={encoded_query}"
            
            logger.debug(f"Searching DuckDuckGo HTML for: {query}")
            
            response = await asyncio.to_thread(
                self.session.get, url, timeout=LLM_REQUEST_TIMEOUT
            )
            
            if response.status_code == 200:
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                content = response.text
                results = []
                
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Å—ã–ª–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                import re
                
                # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–∞–π—Ç—ã
                pattern = r'<a[^>]*href="([^"]*(?:investing|marketwatch|yahoo|finance)[^"]*)"[^>]*>([^<]+)</a>'
                matches = re.findall(pattern, content, re.IGNORECASE)
                
                for url_match, title in matches[:max_results]:
                    if len(title.strip()) > 10:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        results.append({
                            'title': title.strip(),
                            'snippet': f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å {url_match.split('/')[2] if '/' in url_match else '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞'}",
                            'url': url_match,
                            'source': 'DuckDuckGo'
                        })
                
                logger.info(f"Found {len(results)} HTML results for query: {query}")
                return results
                
            else:
                logger.warning(f"DuckDuckGo HTML search failed with status: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"Error in DuckDuckGo HTML search: {e}")
            return []

    async def search_duckduckgo(self, query: str, max_results: int = 5) -> List[Dict[str, str]]:
        """
        –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo Instant Answer API.
        –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞.
        """
        try:
            # DuckDuckGo Instant Answer API
            encoded_query = quote_plus(query)
            url = f"https://api.duckduckgo.com/?q={encoded_query}&format=json&no_html=1&skip_disambig=1"
            
            logger.debug(f"Searching DuckDuckGo for: {query}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            response = await asyncio.to_thread(
                self.session.get, url, timeout=LLM_REQUEST_TIMEOUT
            )
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"üîç DuckDuckGo API response keys: {list(data.keys())}")
                
                results = []
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç (Abstract)
                if data.get('Abstract'):
                    logger.info(f"üìù Found Abstract: {data['Abstract'][:100]}...")
                    results.append({
                        'title': data.get('Heading', 'DuckDuckGo Answer'),
                        'snippet': data['Abstract'],
                        'url': data.get('AbstractURL', ''),
                        'source': 'DuckDuckGo'
                    })
                
                # Related Topics
                related_count = len(data.get('RelatedTopics', []))
                logger.info(f"üìö Found {related_count} related topics")
                
                for topic in data.get('RelatedTopics', [])[:max_results-1]:
                    if isinstance(topic, dict) and topic.get('Text'):
                        logger.info(f"üìÑ Topic: {topic.get('Text', '')[:50]}...")
                        results.append({
                            'title': topic.get('Text', '')[:100] + '...',
                            'snippet': topic.get('Text', ''),
                            'url': topic.get('FirstURL', ''),
                            'source': 'DuckDuckGo'
                        })
                
                logger.info(f"‚úÖ DuckDuckGo API: Found {len(results)} total results for query: {query}")
                return results[:max_results]
                
            else:
                logger.warning(f"DuckDuckGo search failed with status: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"Error in DuckDuckGo search: {e}")
            return []
    
    async def search_financial_news(self, query: str) -> List[Dict[str, str]]:
        """
        –ü–æ–∏—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫ –∑–∞–ø—Ä–æ—Å—É.
        """
        # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
        financial_query = f"{query} —Ñ–∏–Ω–∞–Ω—Å—ã –±–∏—Ä–∂–∞ –∞–∫—Ü–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ 2024 2025"
        
        logger.debug(f"Searching financial news for: {financial_query}")
        return await self.search_duckduckgo(financial_query, max_results=3)
    
    async def search_simple_web(self, query: str) -> List[Dict[str, str]]:
        """
        –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã.
        """
        try:
            # –ü—Ä–æ–±—É–µ–º Google —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å
            search_url = f"https://www.google.com/search?q={quote_plus(query + ' site:investing.com OR site:marketwatch.com')}"
            
            logger.info(f"üåê Trying simple web search for: {query}")
            
            response = await asyncio.to_thread(
                self.session.get, search_url, timeout=10
            )
            
            if response.status_code == 200:
                # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ - –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ü–∏—Ñ—Ä –∏ –≤–∞–ª—é—Ç
                content = response.text.lower()
                results = []
                
                if '–¥–æ–ª–ª–∞—Ä' in query.lower() and ('—Ä—É–±' in content or 'rub' in content):
                    results.append({
                        'title': '–ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞',
                        'snippet': '–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ USD/RUB –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–∞–π—Ç–∞—Ö',
                        'url': 'https://www.google.com/finance',
                        'source': 'Web Search'
                    })
                
                logger.info(f"üîç Simple web search found {len(results)} results")
                return results
            
        except Exception as e:
            logger.error(f"Simple web search failed: {e}")
        
        return []

    async def get_real_financial_data(self, query: str) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API.
        """
        logger.info(f"üí∞ Getting REAL financial data for: {query}")
        
        try:
            from modules.finance_data import finance_client
            
            query_lower = query.lower()
            results = []
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if any(word in query_lower for word in ['–¥–æ–ª–ª–∞—Ä', 'usd', '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞']):
                logger.info("üîç Detected USD rate query")
                usd_data = await finance_client.get_currency_rate("USD", "RUB")
                if usd_data:
                    snippet = f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {usd_data['price']} —Ä—É–±. "
                    if usd_data['change'] > 0:
                        snippet += f"‚ÜóÔ∏è +{usd_data['change']} (+{usd_data['change_percent']}%)"
                    else:
                        snippet += f"‚ÜòÔ∏è {usd_data['change']} ({usd_data['change_percent']}%)"
                    
                    results.append({
                        'title': f"–ö—É—Ä—Å {usd_data['symbol']} - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï",
                        'snippet': snippet,
                        'url': 'https://cbr.ru',
                        'source': usd_data.get('source', '–¶–ë –†–§')
                    })
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –µ–≤—Ä–æ
            elif any(word in query_lower for word in ['–µ–≤—Ä–æ', 'eur', '–∫—É—Ä—Å –µ–≤—Ä–æ']):
                logger.info("üîç Detected EUR rate query")
                eur_data = await finance_client.get_currency_rate("EUR", "RUB")
                if eur_data:
                    snippet = f"–ö—É—Ä—Å –µ–≤—Ä–æ: {eur_data['price']} —Ä—É–±. "
                    if eur_data['change'] > 0:
                        snippet += f"‚ÜóÔ∏è +{eur_data['change']} (+{eur_data['change_percent']}%)"
                    else:
                        snippet += f"‚ÜòÔ∏è {eur_data['change']} ({eur_data['change_percent']}%)"
                    
                    results.append({
                        'title': f"–ö—É—Ä—Å {eur_data['symbol']} - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï",
                        'snippet': snippet,
                        'url': 'https://cbr.ru',
                        'source': eur_data.get('source', '–¶–ë –†–§')
                    })
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∞–∫—Ü–∏—è–º
            elif any(word in query_lower for word in ['—Å–±–µ—Ä–±–∞–Ω–∫', 'sber']):
                logger.info("üîç Detected SBER stock query")
                sber_data = await finance_client.get_stock_quote("SBER.ME")
                if sber_data:
                    snippet = f"–ê–∫—Ü–∏–∏ {sber_data['name']}: {sber_data['price']} {sber_data['currency']}. "
                    if sber_data['change'] > 0:
                        snippet += f"‚ÜóÔ∏è +{sber_data['change']} (+{sber_data['change_percent']}%)"
                    else:
                        snippet += f"‚ÜòÔ∏è {sber_data['change']} ({sber_data['change_percent']}%)"
                    
                    results.append({
                        'title': f"{sber_data['symbol']} - –†–ï–ê–õ–¨–ù–´–ï –ö–û–¢–ò–†–û–í–ö–ò",
                        'snippet': snippet,
                        'url': 'https://finance.yahoo.com',
                        'source': 'Yahoo Finance'
                    })
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∑–æ–ª–æ—Ç—É
            elif any(word in query_lower for word in ['–∑–æ–ª–æ—Ç–æ', 'gold']):
                logger.info("üîç Detected GOLD price query")
                gold_data = await finance_client.get_stock_quote("GC=F")  # Gold futures
                if gold_data:
                    snippet = f"–¶–µ–Ω–∞ –∑–æ–ª–æ—Ç–∞: ${gold_data['price']} –∑–∞ —É–Ω—Ü–∏—é. "
                    if gold_data['change'] > 0:
                        snippet += f"‚ÜóÔ∏è +${gold_data['change']} (+{gold_data['change_percent']}%)"
                    else:
                        snippet += f"‚ÜòÔ∏è ${gold_data['change']} ({gold_data['change_percent']}%)"
                    
                    results.append({
                        'title': "–¶–µ–Ω–∞ –∑–æ–ª–æ—Ç–∞ - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï",
                        'snippet': snippet,
                        'url': 'https://finance.yahoo.com',
                        'source': 'Yahoo Finance'
                    })
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            elif any(word in query_lower for word in ['–±–∏—Ç–∫–æ–π–Ω', 'bitcoin', 'btc']):
                logger.info("üîç Detected BTC price query")
                btc_data = await finance_client.get_crypto_price("BTC")
                if btc_data:
                    snippet = f"Bitcoin: ${btc_data['price']}. "
                    if btc_data['change'] > 0:
                        snippet += f"‚ÜóÔ∏è +${btc_data['change']} (+{btc_data['change_percent']}%)"
                    else:
                        snippet += f"‚ÜòÔ∏è ${btc_data['change']} ({btc_data['change_percent']}%)"
                    
                    results.append({
                        'title': "Bitcoin - –†–ï–ê–õ–¨–ù–ê–Ø –¶–ï–ù–ê",
                        'snippet': snippet,
                        'url': 'https://finance.yahoo.com',
                        'source': 'Yahoo Finance'
                    })
            
            logger.info(f"üí∞ Real finance data: found {len(results)} results")
            return results
            
        except Exception as e:
            logger.error(f"Error getting real financial data: {e}")
            return []

    async def get_mock_financial_data(self, query: str) -> List[Dict[str, str]]:
        """
        –ó–∞–≥–ª—É—à–∫–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
        """
        logger.info(f"üîÑ Using mock financial data for: {query}")
        
        query_lower = query.lower()
        mock_results = []
        
        if '–¥–æ–ª–ª–∞—Ä' in query_lower or 'usd' in query_lower:
            mock_results = [
                {
                    'title': '–ö—É—Ä—Å USD/RUB –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                    'snippet': '–ü–æ –¥–∞–Ω–Ω—ã–º –¶–ë –†–§, –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 90-95 —Ä—É–±–ª–µ–π. –í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ñ–æ–Ω–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π.',
                    'url': 'https://cbr.ru',
                    'source': '–¶–ë –†–§ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)'
                },
                {
                    'title': '–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞',
                    'snippet': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –∫–æ–ª–µ–±–∞–Ω–∏—è –∫—É—Ä—Å–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 85-100 —Ä—É–±–ª–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.',
                    'url': 'https://investing.com',
                    'source': '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'
                }
            ]
        elif '—Å–±–µ—Ä–±–∞–Ω–∫' in query_lower or 'sber' in query_lower:
            mock_results = [
                {
                    'title': '–ê–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞ (SBER)',
                    'snippet': '–¢–æ—Ä–≥—É—é—Ç—Å—è –≤ —Ä–∞–π–æ–Ω–µ 250-280 —Ä—É–±–ª–µ–π –∑–∞ –∞–∫—Ü–∏—é. –ë–∞–Ω–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –¥–∏–≤–∏–¥–µ–Ω–¥—ã.',
                    'url': 'https://moex.com',
                    'source': '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞'
                }
            ]
        elif '–∑–æ–ª–æ—Ç–æ' in query_lower or 'gold' in query_lower:
            mock_results = [
                {
                    'title': '–¶–µ–Ω–∞ –∑–æ–ª–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è',
                    'snippet': '–¶–µ–Ω–∞ –∑–æ–ª–æ—Ç–∞ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è –æ–∫–æ–ª–æ $2000-2100 –∑–∞ —É–Ω—Ü–∏—é. –î—Ä–∞–≥–º–µ—Ç–∞–ª–ª –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–æ–≤.',
                    'url': 'https://goldprice.org',
                    'source': '–†—ã–Ω–æ–∫ –¥—Ä–∞–≥–º–µ—Ç–∞–ª–ª–æ–≤'
                }
            ]
        
        return mock_results

    async def search_asset_info(self, asset_name: str) -> Dict[str, any]:
        """
        –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–µ (–∞–∫—Ü–∏–∏, –≤–∞–ª—é—Ç–µ, —Ç–æ–≤–∞—Ä–µ).
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–∏—Å–∫–∞
            all_results = []
            
            # 1. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
            api_query = f"{asset_name} –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω–∞"
            api_results = await self.search_duckduckgo(api_query, max_results=2)
            all_results.extend(api_results)
            
            # 2. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ HTML (–µ—Å–ª–∏ API –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            if len(api_results) < 2:
                html_query = f"{asset_name} –∫—É—Ä—Å —Ü–µ–Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"
                html_results = await self.search_duckduckgo_html(html_query, max_results=3)
                all_results.extend(html_results)
            
            # 3. –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            news_query = f"{asset_name} –Ω–æ–≤–æ—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å—ã —Å–µ–≥–æ–¥–Ω—è"
            news_results = await self.search_financial_news(news_query)
            
            # 4. –í–°–ï–ì–î–ê –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info(f"üí∞ ALWAYS trying real finance APIs for: {asset_name}")
            real_results = await self.get_real_financial_data(asset_name)
            all_results.extend(real_results)
            
            # 5. –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-–ø–æ–∏—Å–∫
            if not real_results:
                logger.warning(f"‚ö†Ô∏è No real finance data, trying simple web search for: {asset_name}")
                simple_results = await self.search_simple_web(asset_name)
                all_results.extend(simple_results)
                
            # 6. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - mock –¥–∞–Ω–Ω—ã–µ
            if not all_results and not news_results:
                logger.warning(f"‚ö†Ô∏è All APIs failed, using mock data for: {asset_name}")
                mock_results = await self.get_mock_financial_data(asset_name)
                all_results.extend(mock_results)
                logger.info(f"üìù Mock data added: {len(mock_results)} results")
            
            return {
                'asset_name': asset_name,
                'general_info': all_results[:5],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                'recent_news': news_results[:3],
                'search_timestamp': asyncio.get_event_loop().time(),
                'total_results': len(all_results) + len(news_results)
            }
            
        except Exception as e:
            logger.error(f"Error searching asset info for {asset_name}: {e}")
            return {
                'asset_name': asset_name,
                'general_info': [],
                'recent_news': [],
                'error': str(e)
            }
    
    def detect_financial_query(self, user_message: str) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ None.
        """
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        financial_keywords = [
            '–∞–∫—Ü–∏–∏', '–∫–æ—Ç–∏—Ä–æ–≤–∫–∏', '–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '—Ä—É–±–ª—å',
            '—Å–±–µ—Ä–±–∞–Ω–∫', '–≥–∞–∑–ø—Ä–æ–º', '—è–Ω–¥–µ–∫—Å', '—Ç–∏–Ω—å–∫–æ—Ñ—Ñ', '–Ω–æ–≤–æ—Å—Ç–∏', '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
            '–¥–∏–≤–∏–¥–µ–Ω–¥—ã', '–∑–æ–ª–æ—Ç–æ', '–Ω–µ—Ñ—Ç—å', '–±–∏—Ç–∫–æ–π–Ω', '—ç—Ñ–∏—Ä', '—Å–µ–π—á–∞—Å', '—Ç–µ–∫—É—â–∏–π',
            '–∞–∫—Ç—É–∞–ª—å–Ω—ã–π', '–ø–æ—Å–ª–µ–¥–Ω–∏–π', '—Å–≤–µ–∂–∏–π', '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è', '–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç'
        ]
        
        message_lower = user_message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for keyword in financial_keywords:
            if keyword in message_lower:
                logger.debug(f"Detected financial query with keyword: {keyword}")
                return user_message  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        return None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å HTTP —Å–µ—Å—Å–∏—é."""
        if self.session:
            self.session.close()
            logger.info("Web search session closed")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
web_search_client = WebSearchClient()

async def search_for_query(query: str) -> Optional[Dict[str, any]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
    """
    return await web_search_client.search_asset_info(query)

def format_search_results(search_data: Dict[str, any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM.
    """
    if not search_data or 'error' in search_data:
        return ""
    
    total_results = search_data.get('total_results', 0)
    if total_results == 0:
        return ""
    
    formatted = f"\n=== –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê –ü–û '{search_data['asset_name']}' ===\n"
    formatted += f"–ù–∞–π–¥–µ–Ω–æ {total_results} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if search_data.get('general_info'):
        formatted += "üìä –î–ê–ù–ù–´–ï –û –ö–û–¢–ò–†–û–í–ö–ê–• –ò –¶–ï–ù–ê–•:\n"
        for i, result in enumerate(search_data['general_info'], 1):
            snippet = result['snippet'][:300] if result['snippet'] else result['title']
            formatted += f"{i}. {snippet}\n"
            if result.get('url') and 'investing.com' in result['url'] or 'yahoo.com' in result['url']:
                formatted += f"   üìà –ò—Å—Ç–æ—á–Ω–∏–∫: {result['url']}\n"
        formatted += "\n"
    
    # –ù–æ–≤–æ—Å—Ç–∏
    if search_data.get('recent_news'):
        formatted += "üì∞ –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê:\n"
        for i, result in enumerate(search_data['recent_news'], 1):
            snippet = result['snippet'][:300] if result['snippet'] else result['title']
            formatted += f"{i}. {snippet}\n"
            if result.get('url'):
                formatted += f"   üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {result['url']}\n"
        formatted += "\n"
    
    formatted += "‚ö†Ô∏è –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∞–Ω–∞–ª–∏–∑—É, –ø—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.\n"
    formatted += "=== –ö–û–ù–ï–¶ –ü–û–ò–°–ö–û–í–´–• –î–ê–ù–ù–´–• ===\n"
    
    return formatted
